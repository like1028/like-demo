Web3 {
  currentProvider: [Getter/Setter],
  _requestManager:
   RequestManager {
     provider:
      WebsocketProvider {
        responseCallbacks: {},
        notificationCallbacks: [Object],
        connection: [Object] },
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     subscriptions: {} },
  givenProvider: null,
  providers:
   { WebsocketProvider: [Function: WebsocketProvider],
     HttpProvider: [Function: HttpProvider],
     IpcProvider: [Function: IpcProvider] },
  _provider:
   WebsocketProvider {
     responseCallbacks: {},
     notificationCallbacks:
      [ [Function: requestManagerNotification],
        [Function: requestManagerNotification],
        [Function: requestManagerNotification],
        [Function: requestManagerNotification],
        [Function: requestManagerNotification],
        [Function: requestManagerNotification],
        [Function: requestManagerNotification],
        [Function: requestManagerNotification],
        [Function: requestManagerNotification] ],
     connection:
      W3CWebSocket {
        _listeners: {},
        addEventListener: [Function: _addEventListener],
        removeEventListener: [Function: _removeEventListener],
        dispatchEvent: [Function: _dispatchEvent],
        _url: 'ws://localhost:8546',
        _readyState: 0,
        _protocol: undefined,
        _extensions: '',
        _bufferedAmount: 0,
        _binaryType: 'arraybuffer',
        _connection: undefined,
        _client: [Object],
        onerror: [Function],
        onclose: [Function],
        onmessage: [Function] } },
  setProvider: [Function],
  BatchRequest: [Function: bound Batch],
  extend:
   { [Function: ex]
     formatters:
      { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     utils:
      { _fireError: [Function: _fireError],
        _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
        randomHex: [Function: randomHex],
        _: [Object],
        BN: [Object],
        isBN: [Function: isBN],
        isBigNumber: [Function: isBigNumber],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        sha3: [Object],
        keccak256: [Object],
        soliditySha3: [Function: soliditySha3],
        isAddress: [Function: isAddress],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toChecksumAddress: [Function: toChecksumAddress],
        toHex: [Function: toHex],
        toBN: [Function: toBN],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        hexToNumberString: [Function: hexToNumberString],
        hexToNumber: [Function: hexToNumber],
        toDecimal: [Function: hexToNumber],
        numberToHex: [Function: numberToHex],
        fromDecimal: [Function: numberToHex],
        hexToUtf8: [Function: hexToUtf8],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        utf8ToHex: [Function: utf8ToHex],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        hexToAscii: [Function: hexToAscii],
        toAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        fromAscii: [Function: asciiToHex],
        unitMap: [Object],
        toWei: [Function: toWei],
        fromWei: [Function: fromWei],
        padLeft: [Function: leftPad],
        leftPad: [Function: leftPad],
        padRight: [Function: rightPad],
        rightPad: [Function: rightPad],
        toTwosComplement: [Function: toTwosComplement] },
     Method: [Function: Method] },
  version: '1.0.0-beta.27',
  utils:
   { _fireError: [Function: _fireError],
     _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
     randomHex: [Function: randomHex],
     _:
      { [Function: _]
        _: [Circular],
        VERSION: '1.8.3',
        iteratee: [Function],
        forEach: [Function],
        each: [Function],
        collect: [Function],
        map: [Function],
        inject: [Function],
        foldl: [Function],
        reduce: [Function],
        foldr: [Function],
        reduceRight: [Function],
        detect: [Function],
        find: [Function],
        select: [Function],
        filter: [Function],
        reject: [Function],
        all: [Function],
        every: [Function],
        any: [Function],
        some: [Function],
        include: [Function],
        includes: [Function],
        contains: [Function],
        invoke: [Function],
        pluck: [Function],
        where: [Function],
        findWhere: [Function],
        max: [Function],
        min: [Function],
        shuffle: [Function],
        sample: [Function],
        sortBy: [Function],
        groupBy: [Function],
        indexBy: [Function],
        countBy: [Function],
        toArray: [Function],
        size: [Function],
        partition: [Function],
        take: [Function],
        head: [Function],
        first: [Function],
        initial: [Function],
        last: [Function],
        drop: [Function],
        tail: [Function],
        rest: [Function],
        compact: [Function],
        flatten: [Function],
        without: [Function],
        unique: [Function],
        uniq: [Function],
        union: [Function],
        intersection: [Function],
        difference: [Function],
        zip: [Function],
        unzip: [Function],
        object: [Function],
        findIndex: [Function],
        findLastIndex: [Function],
        sortedIndex: [Function],
        indexOf: [Function],
        lastIndexOf: [Function],
        range: [Function],
        bind: [Function],
        partial: [Function],
        bindAll: [Function],
        memoize: [Function],
        delay: [Function],
        defer: [Function: bound],
        throttle: [Function],
        debounce: [Function],
        wrap: [Function],
        negate: [Function],
        compose: [Function],
        after: [Function],
        before: [Function],
        once: [Function: bound],
        keys: [Function],
        allKeys: [Function],
        values: [Function],
        mapObject: [Function],
        pairs: [Function],
        invert: [Function],
        methods: [Function],
        functions: [Function],
        extend: [Function],
        assign: [Function],
        extendOwn: [Function],
        findKey: [Function],
        pick: [Function],
        omit: [Function],
        defaults: [Function],
        create: [Function],
        clone: [Function],
        tap: [Function],
        isMatch: [Function],
        isEqual: [Function],
        isEmpty: [Function],
        isElement: [Function],
        isArray: [Function: isArray],
        isObject: [Function],
        isArguments: [Function],
        isFunction: [Function],
        isString: [Function],
        isNumber: [Function],
        isDate: [Function],
        isRegExp: [Function],
        isError: [Function],
        isFinite: [Function],
        isNaN: [Function],
        isBoolean: [Function],
        isNull: [Function],
        isUndefined: [Function],
        has: [Function],
        noConflict: [Function],
        identity: [Function],
        constant: [Function],
        noop: [Function],
        property: [Function: property],
        propertyOf: [Function],
        matches: [Function],
        matcher: [Function],
        times: [Function],
        random: [Function],
        now: [Function: now],
        escape: [Function],
        unescape: [Function],
        result: [Function],
        uniqueId: [Function],
        templateSettings: [Object],
        template: [Function],
        chain: [Function],
        mixin: [Function] },
     BN:
      { [Function: BN]
        BN: [Circular],
        wordSize: 26,
        isBN: [Function: isBN],
        max: [Function: max],
        min: [Function: min],
        red: [Function: red],
        _prime: [Function: prime],
        mont: [Function: mont] },
     isBN: [Function: isBN],
     isBigNumber: [Function: isBigNumber],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     sha3: { [Function: sha3] _Hash: [Object] },
     keccak256: { [Function: sha3] _Hash: [Object] },
     soliditySha3: [Function: soliditySha3],
     isAddress: [Function: isAddress],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toChecksumAddress: [Function: toChecksumAddress],
     toHex: [Function: toHex],
     toBN: [Function: toBN],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     hexToNumberString: [Function: hexToNumberString],
     hexToNumber: [Function: hexToNumber],
     toDecimal: [Function: hexToNumber],
     numberToHex: [Function: numberToHex],
     fromDecimal: [Function: numberToHex],
     hexToUtf8: [Function: hexToUtf8],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     utf8ToHex: [Function: utf8ToHex],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     hexToAscii: [Function: hexToAscii],
     toAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     fromAscii: [Function: asciiToHex],
     unitMap:
      { noether: '0',
        wei: '1',
        kwei: '1000',
        Kwei: '1000',
        babbage: '1000',
        femtoether: '1000',
        mwei: '1000000',
        Mwei: '1000000',
        lovelace: '1000000',
        picoether: '1000000',
        gwei: '1000000000',
        Gwei: '1000000000',
        shannon: '1000000000',
        nanoether: '1000000000',
        nano: '1000000000',
        szabo: '1000000000000',
        microether: '1000000000000',
        micro: '1000000000000',
        finney: '1000000000000000',
        milliether: '1000000000000000',
        milli: '1000000000000000',
        ether: '1000000000000000000',
        kether: '1000000000000000000000',
        grand: '1000000000000000000000',
        mether: '1000000000000000000000000',
        gether: '1000000000000000000000000000',
        tether: '1000000000000000000000000000000' },
     toWei: [Function: toWei],
     fromWei: [Function: fromWei],
     padLeft: [Function: leftPad],
     leftPad: [Function: leftPad],
     padRight: [Function: rightPad],
     rightPad: [Function: rightPad],
     toTwosComplement: [Function: toTwosComplement] },
  eth:
   Eth {
     currentProvider: [Getter/Setter],
     _requestManager: RequestManager { provider: [Object], providers: [Object], subscriptions: {} },
     givenProvider: null,
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     _provider:
      WebsocketProvider {
        responseCallbacks: {},
        notificationCallbacks: [Object],
        connection: [Object] },
     setProvider: [Function],
     BatchRequest: [Function: bound Batch],
     extend:
      { [Function: ex]
        formatters: [Object],
        utils: [Object],
        Method: [Function: Method] },
     defaultAccount: [Getter/Setter],
     defaultBlock: [Getter/Setter],
     clearSubscriptions: [Function],
     net:
      Net {
        currentProvider: [Getter/Setter],
        _requestManager: [Object],
        givenProvider: null,
        providers: [Object],
        _provider: [Object],
        setProvider: [Function],
        BatchRequest: [Function: bound Batch],
        extend: [Object],
        getId: [Object],
        isListening: [Object],
        getPeerCount: [Object],
        getNetworkType: [Function: bound getNetworkType] },
     accounts:
      Accounts {
        currentProvider: [Getter/Setter],
        _requestManager: [Object],
        givenProvider: null,
        providers: [Object],
        _provider: [Object],
        setProvider: [Function],
        _ethereumCall: [Object],
        wallet: [Object] },
     personal:
      Personal {
        currentProvider: [Getter/Setter],
        _requestManager: [Object],
        givenProvider: null,
        providers: [Object],
        _provider: [Object],
        setProvider: [Function],
        BatchRequest: [Function: bound Batch],
        extend: [Object],
        net: [Object],
        defaultAccount: [Getter/Setter],
        defaultBlock: [Getter/Setter],
        getAccounts: [Object],
        newAccount: [Object],
        unlockAccount: [Object],
        lockAccount: [Object],
        importRawKey: [Object],
        sendTransaction: [Object],
        sign: [Object],
        ecRecover: [Object] },
     Contract:
      { [Function: Contract]
        setProvider: [Function],
        defaultAccount: null,
        defaultBlock: 'latest',
        currentProvider: [Getter/Setter],
        _requestManager: [Object],
        givenProvider: null,
        providers: [Object],
        _provider: [Object],
        BatchRequest: [Function: bound Batch],
        extend: [Object],
        _ethAccounts: [Object] },
     Iban:
      { [Function: Iban]
        toAddress: [Function],
        toIban: [Function],
        fromAddress: [Function],
        fromBban: [Function],
        createIndirect: [Function],
        isValid: [Function] },
     abi: ABICoder { _types: [Object] },
     getProtocolVersion:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_protocolVersion' },
     getCoinbase:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_coinbase' },
     isMining:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_mining' },
     getHashrate:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_hashrate' },
     isSyncing:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_syncing' },
     getGasPrice:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_gasPrice' },
     getAccounts:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_accounts' },
     getBlockNumber:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_blockNumber' },
     getBalance:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_getBalance' },
     getStorageAt:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_getStorageAt' },
     getCode:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_getCode' },
     getBlock:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: [Function: blockCall] },
     getUncle:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: [Function: uncleCall] },
     getBlockTransactionCount:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: [Function: getBlockTransactionCountCall] },
     getBlockUncleCount:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: [Function: uncleCountCall] },
     getTransaction:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_getTransactionByHash' },
     getTransactionFromBlock:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: [Function: transactionFromBlockCall] },
     getTransactionReceipt:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_getTransactionReceipt' },
     getTransactionCount:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_getTransactionCount' },
     sendSignedTransaction:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_sendRawTransaction' },
     signTransaction:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_signTransaction' },
     sendTransaction:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_sendTransaction' },
     sign:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_sign' },
     call:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_call' },
     estimateGas:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_estimateGas' },
     getCompilers:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_getCompilers' },
     compile: { solidity: [Object], lll: [Object], serpent: [Object] },
     submitWork:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_submitWork' },
     getWork:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_getWork' },
     getPastLogs:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'eth_getLogs' },
     subscribe: { [Function] call: undefined } },
  shh:
   Shh {
     currentProvider: [Getter/Setter],
     _requestManager: RequestManager { provider: [Object], providers: [Object], subscriptions: {} },
     givenProvider: null,
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     _provider:
      WebsocketProvider {
        responseCallbacks: {},
        notificationCallbacks: [Object],
        connection: [Object] },
     setProvider: [Function],
     BatchRequest: [Function: bound Batch],
     extend:
      { [Function: ex]
        formatters: [Object],
        utils: [Object],
        Method: [Function: Method] },
     clearSubscriptions: [Function],
     net:
      Net {
        currentProvider: [Getter/Setter],
        _requestManager: [Object],
        givenProvider: null,
        providers: [Object],
        _provider: [Object],
        setProvider: [Function],
        BatchRequest: [Function: bound Batch],
        extend: [Object],
        getId: [Object],
        isListening: [Object],
        getPeerCount: [Object] },
     subscribe: { [Function] call: undefined },
     getVersion:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_version' },
     getInfo:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_info' },
     setMaxMessageSize:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_setMaxMessageSize' },
     setMinPoW:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_setMinPoW' },
     markTrustedPeer:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_markTrustedPeer' },
     newKeyPair:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_newKeyPair' },
     addPrivateKey:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_addPrivateKey' },
     deleteKeyPair:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_deleteKeyPair' },
     hasKeyPair:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_hasKeyPair' },
     getPublicKey:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_getPublicKey' },
     getPrivateKey:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_getPrivateKey' },
     newSymKey:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_newSymKey' },
     addSymKey:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_addSymKey' },
     generateSymKeyFromPassword:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_generateSymKeyFromPassword' },
     hasSymKey:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_hasSymKey' },
     getSymKey:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_getSymKey' },
     deleteSymKey:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_deleteSymKey' },
     newMessageFilter:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_newMessageFilter' },
     getFilterMessages:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_getFilterMessages' },
     deleteMessageFilter:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_deleteMessageFilter' },
     post:
      { [Function: send]
        method: [Object],
        request: [Function: bound ],
        call: 'shh_post' } },
  bzz:
   Bzz {
     givenProvider: null,
     currentProvider: null,
     isAvailable: [Function],
     upload: [Function],
     download: [Function] } }