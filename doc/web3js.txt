{ [Function: Web3]
  version: '1.0.0-beta.27',
  utils: 
   { _fireError: [Function: _fireError],
     _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
     randomHex: [Function: randomHex],
     _: 
      { [Function: _]
        _: [Circular],
        VERSION: '1.8.3',
        iteratee: [Function],
        forEach: [Function],
        each: [Function],
        collect: [Function],
        map: [Function],
        inject: [Function],
        foldl: [Function],
        reduce: [Function],
        foldr: [Function],
        reduceRight: [Function],
        detect: [Function],
        find: [Function],
        select: [Function],
        filter: [Function],
        reject: [Function],
        all: [Function],
        every: [Function],
        any: [Function],
        some: [Function],
        include: [Function],
        includes: [Function],
        contains: [Function],
        invoke: [Function],
        pluck: [Function],
        where: [Function],
        findWhere: [Function],
        max: [Function],
        min: [Function],
        shuffle: [Function],
        sample: [Function],
        sortBy: [Function],
        groupBy: [Function],
        indexBy: [Function],
        countBy: [Function],
        toArray: [Function],
        size: [Function],
        partition: [Function],
        take: [Function],
        head: [Function],
        first: [Function],
        initial: [Function],
        last: [Function],
        drop: [Function],
        tail: [Function],
        rest: [Function],
        compact: [Function],
        flatten: [Function],
        without: [Function],
        unique: [Function],
        uniq: [Function],
        union: [Function],
        intersection: [Function],
        difference: [Function],
        zip: [Function],
        unzip: [Function],
        object: [Function],
        findIndex: [Function],
        findLastIndex: [Function],
        sortedIndex: [Function],
        indexOf: [Function],
        lastIndexOf: [Function],
        range: [Function],
        bind: [Function],
        partial: [Function],
        bindAll: [Function],
        memoize: [Function],
        delay: [Function],
        defer: [Function: bound],
        throttle: [Function],
        debounce: [Function],
        wrap: [Function],
        negate: [Function],
        compose: [Function],
        after: [Function],
        before: [Function],
        once: [Function: bound],
        keys: [Function],
        allKeys: [Function],
        values: [Function],
        mapObject: [Function],
        pairs: [Function],
        invert: [Function],
        methods: [Function],
        functions: [Function],
        extend: [Function],
        assign: [Function],
        extendOwn: [Function],
        findKey: [Function],
        pick: [Function],
        omit: [Function],
        defaults: [Function],
        create: [Function],
        clone: [Function],
        tap: [Function],
        isMatch: [Function],
        isEqual: [Function],
        isEmpty: [Function],
        isElement: [Function],
        isArray: [Function: isArray],
        isObject: [Function],
        isArguments: [Function],
        isFunction: [Function],
        isString: [Function],
        isNumber: [Function],
        isDate: [Function],
        isRegExp: [Function],
        isError: [Function],
        isFinite: [Function],
        isNaN: [Function],
        isBoolean: [Function],
        isNull: [Function],
        isUndefined: [Function],
        has: [Function],
        noConflict: [Function],
        identity: [Function],
        constant: [Function],
        noop: [Function],
        property: [Function: property],
        propertyOf: [Function],
        matches: [Function],
        matcher: [Function],
        times: [Function],
        random: [Function],
        now: [Function: now],
        escape: [Function],
        unescape: [Function],
        result: [Function],
        uniqueId: [Function],
        templateSettings: [Object],
        template: [Function],
        chain: [Function],
        mixin: [Function] },
     BN: 
      { [Function: BN]
        BN: [Circular],
        wordSize: 26,
        isBN: [Function: isBN],
        max: [Function: max],
        min: [Function: min],
        red: [Function: red],
        _prime: [Function: prime],
        mont: [Function: mont] },
     isBN: [Function: isBN],
     isBigNumber: [Function: isBigNumber],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     sha3: { [Function: sha3] _Hash: [Object] },
     keccak256: { [Function: sha3] _Hash: [Object] },
     soliditySha3: [Function: soliditySha3],
     isAddress: [Function: isAddress],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toChecksumAddress: [Function: toChecksumAddress],
     toHex: [Function: toHex],
     toBN: [Function: toBN],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     hexToNumberString: [Function: hexToNumberString],
     hexToNumber: [Function: hexToNumber],
     toDecimal: [Function: hexToNumber],
     numberToHex: [Function: numberToHex],
     fromDecimal: [Function: numberToHex],
     hexToUtf8: [Function: hexToUtf8],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     utf8ToHex: [Function: utf8ToHex],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     hexToAscii: [Function: hexToAscii],
     toAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     fromAscii: [Function: asciiToHex],
     unitMap: 
      { noether: '0',
        wei: '1',
        kwei: '1000',
        Kwei: '1000',
        babbage: '1000',
        femtoether: '1000',
        mwei: '1000000',
        Mwei: '1000000',
        lovelace: '1000000',
        picoether: '1000000',
        gwei: '1000000000',
        Gwei: '1000000000',
        shannon: '1000000000',
        nanoether: '1000000000',
        nano: '1000000000',
        szabo: '1000000000000',
        microether: '1000000000000',
        micro: '1000000000000',
        finney: '1000000000000000',
        milliether: '1000000000000000',
        milli: '1000000000000000',
        ether: '1000000000000000000',
        kether: '1000000000000000000000',
        grand: '1000000000000000000000',
        mether: '1000000000000000000000000',
        gether: '1000000000000000000000000000',
        tether: '1000000000000000000000000000000' },
     toWei: [Function: toWei],
     fromWei: [Function: fromWei],
     padLeft: [Function: leftPad],
     leftPad: [Function: leftPad],
     padRight: [Function: rightPad],
     rightPad: [Function: rightPad],
     toTwosComplement: [Function: toTwosComplement] },
  modules: 
   { Eth: { [Function: Eth] givenProvider: null, providers: [Object] },
     Net: { [Function: Net] givenProvider: null, providers: [Object] },
     Personal: { [Function: Personal] givenProvider: null, providers: [Object] },
     Shh: { [Function: Shh] givenProvider: null, providers: [Object] },
     Bzz: { [Function: Bzz] givenProvider: null } },
  givenProvider: null,
  providers: 
   { WebsocketProvider: [Function: WebsocketProvider],
     HttpProvider: [Function: HttpProvider],
     IpcProvider: [Function: IpcProvider] } }